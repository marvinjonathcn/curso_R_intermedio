library(ggplot2)
library(ggplot2)
library(httr)
library(DataExplorer)
library(ggplot2)
library(httr)
library(DataExplorer)
library(ggplot2)
library(httr)
library(DataExplorer)
library(ggplot2)
library(httr)
library(DataExplorer)
r <- GET("https://www.senamhi.gob.pe/site/sea/www/site/sea/graficas/dato_hora.php?estacion=112194&cont=N_PM25&f1=01/01/2020&f2=31/12/2020")
View(r)
s <- content(r, "text")
s
s <- content(r, "text")
s
s_split1 <- strsplit(s, 'radius: 0,')[[1]][3]
s_split1
s_split2 <- strsplit(s_split1, "[")[[1]][2]
s_split2 <- strsplit(s_split1, "\\[")[[1]][2]
s_split2
s_split2
s_split3 <- strsplit(s_split2, ',]')[[1]][1]
s_split3
s2_split1 <- strsplit(s, 'xAxis: \\{')[[1]][2]
s2_split2 <- strsplit(s2_split1, "\\[")[[1]][2]
s2_split1
s2_split2 <- strsplit(s2_split1, "\\[")[[1]][2]
s2_split2
s2_split3 <- strsplit(s2_split2, ',]')[[1]][1]
s2_split3
values_df <- data.frame()
s2_split3
for (i in 1:length(values_o[[1]])){
values_df[i,1] <- as.numeric(values_o[[1]][i])
}
values_o <- strsplit(s_split3, ",")
for (i in 1:length(values_o[[1]])){
values_df[i,1] <- as.numeric(values_o[[1]][i])
}
View(values_df)
s2_split3
for (i in 1:length(date_o[[1]])){
date_1 <- as.character(date_o[[1]][i])
date_2 <- substr(date_1, 2, 16 )
date_df[i,1] <- date_2
}
date_df <- data.frame()
date_o <- strsplit(s2_split3, ",")
for (i in 1:length(date_o[[1]])){
date_1 <- as.character(date_o[[1]][i])
date_2 <- substr(date_1, 2, 16 )
date_df[i,1] <- date_2
}
View(date_df)
View(values_df)
df <- data.frame(date_df[,1], values_df[,1])
names(df) <- c("date", "PM25")
View(df)
# ASIGNAR EL FORMATO DE FECHA
df$date <- as.POSIXct(as.character(df$date), format = "%d/%m/%Y%H:%M")
View(date_df)
View(df)
str(df)
library(DataExplorer)
# RESUMEN DE NUESTROS DATOS
introduce(df)
# VALORES FALTANTES O MISSING
plot_missing(df)
# QQPLOT
plot_qq(df)
# HISTOGRAMA
plot_histogram(df)
# TIME PLOT
timePlot(df, pollutant = "PM25",
ref.y = list(h = 25, lty = 5),
avg.time = "1 day")
library(openair)
# TIME PLOT
timePlot(df, pollutant = "PM25",
ref.y = list(h = 25, lty = 5),
avg.time = "1 day")
# TIME PLOT
timePlot(df, pollutant = "PM25",
ref.y = list(h = 50, lty = 5),
avg.time = "1 day")
# TIME PLOT
timePlot(df, pollutant = "PM25",
ref.y = list(h = 50, lty = 5),
avg.time = "1 day")
# TIME PLOT
timePlot(df, pollutant = "PM25",
ref.y = list(h = 40, lty = 5),
avg.time = "1 day")
ggplot(df, aes(x=date, y=PM25)) +
geom_point() +
geom_line() +
geom_smooth(method = "loess")
ggplot(df, aes(x=date, y=PM25)) +
geom_line()
geom_smooth(method = "loess")
ggplot(df, aes(x=date, y=PM25)) +
geom_line() +
geom_smooth(method = "loess")
ggplot(df, aes(y = PM25)) +
geom_boxplot()
View(df)
library(hydroTSM)
#################################
# AUTOMATIZACION Y PROCESAMIENTO DE DATOS DE CALIDAD DE AIRE DEL SENAMHI
# CURSO: PROGRAMACION CON R
# Marvin J. Quispe Sedano
# Email: marvinjqs@gmail.com
#################################
#---------------------------------------------------------
# Para limpiar la consola:
# TeclaS :  Ctrl + L
# Para limpiar el workspace:
rm(list = ls())
###############
#  Paquetes   #
###############
library(ggplot2)
library(httr)
library(DataExplorer)
#######################
#  DESCARGA DE DATOS  #
#######################
r <- GET("https://www.senamhi.gob.pe/site/sea/www/site/sea/graficas/dato_hora.php?estacion=112194&cont=N_PM25&f1=01/01/2020&f2=31/12/2020")
s <- content(r, "text")
# REALIZAMOS LOS CORTES PARA QUEDARNOS SOLO CON LOS DATOS
s_split1 <- strsplit(s, 'radius: 0,')[[1]][3]
s_split2 <- strsplit(s_split1, "\\[")[[1]][2]
s_split3 <- strsplit(s_split2, ',]')[[1]][1]
# REALIZAMOS LOS CORTES PARA QUEDARNOS CON LAS FECHAS
s2_split1 <- strsplit(s, 'xAxis: \\{')[[1]][2]
s2_split2 <- strsplit(s2_split1, "\\[")[[1]][2]
s2_split3 <- strsplit(s2_split2, ',]')[[1]][1]
# OBTENER UN DATAFRAME CON LOS VALORES DE CONCENTRACION
values_df <- data.frame()
values_o <- strsplit(s_split3, ",")
for (i in 1:length(values_o[[1]])){
values_df[i,1] <- as.numeric(values_o[[1]][i])
}
# OBTENER UN DATAFRAME PARA LAS FECHAS
date_df <- data.frame()
date_o <- strsplit(s2_split3, ",")
for (i in 1:length(date_o[[1]])){
date_1 <- as.character(date_o[[1]][i])
date_2 <- substr(date_1, 2, 16 )
date_df[i,1] <- date_2
}
# CONCATENAR LOS DATAFRAMES
df <- data.frame(date_df[,1], values_df[,1])
names(df) <- c("date", "PM25")
# ASIGNAR EL FORMATO DE FECHA
df$date <- as.POSIXct(as.character(df$date), format = "%d/%m/%Y%H:%M")
View(df)
getwd()
write.csv(df, "air-data-campodm.csv", row.names = F)
r <- GET("https://www.senamhi.gob.pe/site/sea/www/site/sea/graficas/dato_hora.php?estacion=112194&cont=N_PM25&f1=01/01/2020&f2=31/12/2020")
s <- content(r, "text")
# REALIZAMOS LOS CORTES PARA QUEDARNOS SOLO CON LOS DATOS
s_split1 <- strsplit(s, 'radius: 0,')[[1]][3]
s_split2 <- strsplit(s_split1, "\\[")[[1]][2]
s_split3 <- strsplit(s_split2, ',]')[[1]][1]
# REALIZAMOS LOS CORTES PARA QUEDARNOS CON LAS FECHAS
s2_split1 <- strsplit(s, 'xAxis: \\{')[[1]][2]
s2_split2 <- strsplit(s2_split1, "\\[")[[1]][2]
s2_split3 <- strsplit(s2_split2, ',]')[[1]][1]
# OBTENER UN DATAFRAME CON LOS VALORES DE CONCENTRACION
values_df <- data.frame()
values_o <- strsplit(s_split3, ",")
for (i in 1:length(values_o[[1]])){
values_df[i,1] <- as.numeric(values_o[[1]][i])
}
# OBTENER UN DATAFRAME PARA LAS FECHAS
date_df <- data.frame()
date_o <- strsplit(s2_split3, ",")
for (i in 1:length(date_o[[1]])){
date_1 <- as.character(date_o[[1]][i])
date_2 <- substr(date_1, 2, 16 )
date_df[i,1] <- date_2
}
# CONCATENAR LOS DATAFRAMES
df <- data.frame(date_df[,1], values_df[,1])
names(df) <- c("date", "PM25")
# ASIGNAR EL FORMATO DE FECHA
df$date <- as.POSIXct(as.character(df$date), format = "%d/%m/%Y%H:%M")
write.csv(df, "air-data-campodm.csv", row.names = F)
#################################
# AUTOMATIZACION DE LA DESCARGA DE DATOS HIDROMETEOROLOGICOS DE SENAMHI
# CURSO: PROGRAMACION CON R
# Marvin J. Quispe Sedano
# Email: marvinjqs@gmail.com
#################################
#---------------------------------------------------------
# Para limpiar la consola:
# TeclaS :  Ctrl + L
# Para limpiar el workspace:
rm(list = ls())
###############
#  Paquetes   #
###############
library(ggplot2)
library(RSelenium)
library(DataExplorer)
# FIJAR EL DIRECTORIO DE TRABAJO
setwd("C:/Users/Asus/Desktop/R/INTERMEDIO/CLASE3")
#######################
#  DESCARGA DE DATOS  #
#######################
# DEFINIR UNA FUNCION PARA LA DESCARGA DE DATOS
library(RSelenium)
download_senamhi_data <- function(url_list) {
# NUMERO ALEATORIO DE PUERTO
port <- as.integer(runif(1, min = 5000, max = 6000))
# EJECUTAMOS EL DRIVER DE GOOGLE CHROME
rD <- rsDriver(port = port, browser = "chrome",
chromever = "91.0.4472.19")
remDrv <- rD$client
for (url in url_list){
# INGRESAR AL URL
remDrv$navigate(url)
# ENCONTRAR EL BOTON DE DESCARGA
down_button <- remDrv$findElement(using = "id", "export2")
down_button$clickElement()
}
# CERRAR LA SESION ACTUAL
remDrv$close()
rD$server$stop()
rm(rD, remDrv)
gc()
}
# EJECUTAR LA FUNCION PARA DESCARGAR TODOS LOS MESES DE UN AÃO
list_url <- list()
for (i in 1:9) {
list_url[i] = paste("https://www.senamhi.gob.pe//mapas/mapa-estaciones-2/_dato_esta_tipo02.php?estaciones=112181&CBOFiltro=20200",
i, "&t_e=M&estado=AUTOMATICA&cod_old=&cate_esta=EMA&alt=117", sep = "")
}
for (i in 10:12) {
list_url[i] = paste("https://www.senamhi.gob.pe//mapas/mapa-estaciones-2/_dato_esta_tipo02.php?estaciones=112181&CBOFiltro=2020",
i, "&t_e=M&estado=AUTOMATICA&cod_old=&cate_esta=EMA&alt=117", sep = "")
}
download_senamhi_data(list_url)
###################
#  IMPORTAR DATOS #
###################
# IMPORTAR LOS ARCHIVOS CSV DE UNA CARPETA
wd_path <- "C:/Users/Asus/Desktop/R/INTERMEDIO/CLASE3"
myfiles <- list.files(path=wd_path, pattern="*.csv", full.names=TRUE)
df_list <- list()
for (i in 1:length(myfiles)){
df_list[[i]] <- read.table(myfiles[i], sep = ",", header = T ,
skip = 10 , stringsAsFactors = F,
na.strings = "S/D")
}
# CONCATENAR LOS DATAFRAMES DE LA LISTA
df <- Reduce(function(...) merge(... , all=TRUE), df_list)
# MODIFICAR LA COLUMNA DE LA FECHA
df$date = as.POSIXct(paste(df[,1], df[,2], sep = " "),
format = "%Y/%m/%d %H:%M")
df <- df[,-c(1,2)]
df <- df[, c(6,1:5)]
# MODIFICAR LOS NOMBRES DE CADA COLUMNA
colnames(df) <- c("date", "TEMP", "PP", "HUM", "DIR_V", "VEL_V")
View(df)
write.csv(df, "data-meteo-campodm.csv", row.names = F)
setwd()
getwd()
# CONFIGURAR EL DIRECTORIO DE TRABAJO
setwd(DirSource("D:\PROYECTOS-R\curso_R_intermedio\script\CLASE5"))
# CONFIGURAR EL DIRECTORIO DE TRABAJO
setwd(readClipboard("D:\PROYECTOS-R\curso_R_intermedio\script\CLASE5"))
# CONFIGURAR EL DIRECTORIO DE TRABAJO
setwd("D:\PROYECTOS-R\curso_R_intermedio\script\CLASE5")
# CONFIGURAR EL DIRECTORIO DE TRABAJO
setwd("D:/PROYECTOS-R/curso_R_intermedio/script/CLASE5")
path_wd <- replace("D:\PROYECTOS-R\curso_R_intermedio\script\CLASE5",
"\", "\\")
"\", "{/}")
"\", "/")
path_wd <- readClipboard()
path_wd <- readClipboard()
setwd("path_wd")
setwd(path_wd)
df1 <- read.table("air-data-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
View(df1)
str(df1)
View(df1)
df2 <- read.table("data-meteo-campodm.csv", header = T,
stringsAsFactors = F, sep = ",")
# MERGE A LOS DF
df <- merge(df1, df2, by = "date")
View(df)
View(df)
# CONVERTIR FECHAS
df$date <- as.POSIXct(df$date, format 0= "%Y-%m-%d %H:%M:%S")
# CONVERTIR FECHAS
df$date <- as.POSIXct(df$date, format 0= "%Y-%m-%d %H:%M")
# CONVERTIR FECHAS
df$date <- as.POSIXct(df$date, format = "%Y-%m-%d %H:%M:%S")
View(df)
str(df)
# VALORES FALTANTES O MISSING
plot_missing(df)
# VALORES FALTANTES O MISSING
plot_missing(df)
profile_missing(df)
plot_intro(df)
plot_intro(df)
# RESUMEN DE NUESTROS DATOS
introduce(df)
split=0.80
trainIndex <- createDataPartition(df, p=split, list=FALSE)
library(caret)
library(klaR)
split=0.80
trainIndex <- createDataPartition(df, p=split, list=FALSE)
seq_len(nrow(df))
preproc1 <- preProcess(df, method = "range")
norm1 <- predict(preproc1, df)
View(norm1)
#################################
# TRABAJO APLICATIVO - CLASE 2 - N1
# CURSO: PROGRAMACION CON R
# Marvin J. Quispe Sedano
# Email: marvinjqs@gmail.com
#################################
#---------------------------------------------------------
# Para limpiar la consola:
# TeclaS :  Ctrl + L
# Para limpiar el workspace:
rm(list = ls())
###############
#  Paquetes   #
###############
library(ggplot2)
# FIJAR EL DIRECTORIO DE TRABAJO
path_wd <- readClipboard()
setwd(path_wd)
# PREGUNTA 1
df <- read.table("DailyDelhiClimateTrain.csv", sep = ",", header = T,
stringsAsFactors = F)
# PREGUNTA 2
str(df)
summary(df)
hist(log(df$wind_speed))
qqnorm(df$wind_speed)
boxplot(df[,-c(1,5)])
# PREGUNTA 3
df$meantemp_f <- (df$meantemp*9/5) + 32
# PREGUNTA 4
df[df$meantemp == min(df$meantemp), ]
df[df$meantemp == max(df$meantemp), ]
# PREGUNTA 5
df$date <- as.Date(df$date, format = "%Y-%m-%d")
df$date_m <- format(df$date, format = "%B")
str(df)
ggplot(df, aes(meantemp, humidity)) +
geom_point()+
facet_wrap(~date_m)
# PREGUNTA 6
ggplot(df, aes(date, humidity)) +
geom_point()+
facet_wrap(~date_m, nrow = 4, ncol = 3)
# PREGUNTA 7
ggplot(df, aes(y = humidity)) +
geom_boxplot() +
facet_wrap(~date_m)
ggplot(df, aes(date, humidity)) +
geom_point()+
facet_wrap(~date_m, nrow = 4, ncol = 3)
path_wd <- readClipboard()
setwd(path_wd)
# PREGUNTA 1
df <- read.table("DailyDelhiClimateTrain.csv", sep = ",", header = T,
stringsAsFactors = F)
# PREGUNTA 2
str(df)
summary(df)
hist(log(df$wind_speed))
qqnorm(df$wind_speed)
boxplot(df[,-c(1,5)])
df$meantemp_f <- (df$meantemp*9/5) + 32
df[df$meantemp == min(df$meantemp), ]
df[df$meantemp == max(df$meantemp), ]
df$date <- as.Date(df$date, format = "%Y-%m-%d")
df$date_m <- format(df$date, format = "%B")
str(df)
ggplot(df, aes(meantemp, humidity)) +
geom_point()+
facet_wrap(~date_m)
ggplot(df, aes(date, humidity)) +
geom_point()+
facet_wrap(~date_m, nrow = 4, ncol = 3)
View(df)
df2 <- df[df$date_m == "Enero",]
View(df2)
df$date <- as.Date(df$date, format = "%Y-%m-%d")
df$date_m <- format(df$date, format = "%B-%Y")
View(df)
df2 <- df[df$date_m == "Enero-2013",]
View(df2)
View(df2)
ggplot(df2, aes(date, humidity)) +
geom_point()
ggplot(df2, aes(date, humidity)) +
geom_point()+
geom_line()
df2 <- df[df$date_m == "Enero-2013",]
df3 <- df[df$date_m == "Febrero-2013",]
g1 <- ggplot(df2, aes(date, humidity)) +
geom_point()+
geom_line()
g2 <- ggplot(df3, aes(date, humidity)) +
geom_point()+
geom_line()
g2
g1
figure <- ggarrange(g1, g2,
labels = c("ENERO-2013", "FEBRERO-2013"),
ncol = 1)
library(ggpubr)
figure <- ggarrange(g1, g2,
labels = c("ENERO-2013", "FEBRERO-2013"),
ncol = 1)
figure
figure <- ggarrange(g1, g2,
labels = c("01-2013", "02-2013"),
ncol = 2)
figure
View(df2)
levels(as.factor(df$date_m))
g1 <- ggplot(df2, aes(date, humidity)) +
geom_point()+
geom_line() +
geom_smooth()
g2 <- ggplot(df3, aes(date, humidity)) +
geom_point()+
geom_line() +
geom_smooth()
library(ggpubr)
figure <- ggarrange(g1, g2,
labels = c("01-2013", "02-2013"),
ncol = 2)
figure
View(df2)
View(df)
################################
df_m <- split(df, with(df, interaction(dat_m)), drop = TRUE)
################################
df_m <- split(df, with(df, interaction(date_m)), drop = TRUE)
View(df_m)
class(df_m)
df_m[[1]]
f_grafico <- function(x){
a <- ggplot(x, aes(y = humidity)) +
geom_point() +
geom_line() +
geom_smooth()
return(a)
}
graf_list <- lapply(df_m, f_grafico )
graf_list[[1]]
f_grafico <- function(x){
a <- ggplot(x, aes(x= date, y = humidity)) +
geom_point() +
geom_line() +
geom_smooth()
return(a)
}
graf_list <- lapply(df_m, f_grafico )
graf_list[[1]]
View(graf_list)
View(graf_list)
View(graf_list)
View(graf_list)
graf_list[[1]]
df[[5]]
df[[6]]
df[[8]]
df[[7]]
levels(df[[7]])
levels(as.factor(df[[7]]))
View(df)
View(df)
df_m <- split(df, with(df, interaction(date_m)), drop = TRUE)
View(df_m)
df_m[[1]]
df_m[[2]]
f_grafico <- function(x){
a <- ggplot(x, aes(x= date, y = humidity)) +
geom_point() +
geom_line() +
geom_smooth()
return(a)
}
View(df)
graf_list <- lapply(df_m, f_grafico )
graf_list [[1]]
graf_list [[2]]
graf_list [[40]]
figure <- ggarrange(graf_list[[1]],graf_list[[2]],
labels = c("01-2013", "02-2013"),
ncol = 2)
figure
View(graf_list)
